{"version":3,"sources":["assets/images/two-tone-light.svg","assets/images/serotracker_map_may7.png","assets/images/serotracker_chart_may7.jpg","components/static/Dashboard.tsx","components/static/About.tsx","components/static/Home.tsx","context.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","Dashboard","className","src","require","About","renderBioBlock","name","description","map","line","href","Home","renderPane","Tab","Pane","title","width","height","panes","menuItem","render","rel","target","AppContext","createContext","initialState","healthcheck","airtable_records","filtered_records","filters","source_type","Set","study_status","test_type","populations","country","filter_options","updated_at","filterRecords","records","filter_function","record","filter_key","size","Array","isArray","in_filter","i","length","has","buildFilterFunction","filter","getFilterOptions","forEach","seroprevalence","denominator","add","population","reducer","state","action","new_filters","type","payload","filter_type","filter_value","AppContextProvider","props","useReducer","dispatch","Provider","value","children","App","useState","tab","setTab","useContext","location","useLocation","useEffect","pathname","usePageViews","getTabClass","tabName","authStatus","localStorage","hasOwnProperty","getItem","to","Icon","alt","path","exact","from","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.06ffc458.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/two-tone-light.59be83b8.svg\";","module.exports = __webpack_public_path__ + \"static/media/serotracker_map_may7.4d85588f.png\";","module.exports = __webpack_public_path__ + \"static/media/serotracker_chart_may7.a5837e11.jpg\";","import React from \"react\";\nimport './static.css';\n\nexport default function Dashboard() {\n    return (\n        <div className=\"page py-4\">\n            <div className=\"static-content\">\n                <p>\n                    Our interactive world map is currently in development. Illustrative images from development work are below.\n                </p>\n            </div>\n            <img src={require('../../assets/images/serotracker_map_may7.png')} className='dashboard-img my-2'/>\n            <img src={require('../../assets/images/serotracker_chart_may7.jpg')} className='dashboard-img my-2'/>\n        </div>\n    )\n}","import React from \"react\";\nimport './static.css';\n\nexport default function About() {\n\n    function renderBioBlock(name: string, description: string[]){\n        return (\n            <div>\n                <b>\n                    {name}\n                </b>\n                <br/>\n                {description.map((line) => {\n                    return (\n                        <div>\n                            {line}\n                            <br/>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n    return (\n        <div className=\"page col-12\">\n            <div className=\"static-content\">\n                <h1>\n                    Scientific Lead:\n                </h1>\n                <div>\n                    {renderBioBlock('Tim Evans', ['Director, School of Population and Global Health, McGill University', 'Executive Director, Canadian COVID-19 Immunity Task Force'])}\n                </div>\n                <h1>\n                    Research Team:\n                </h1>\n                <div className=\"bio-grid-container\">\n                    {renderBioBlock('Rahul Arora', ['University of Oxford'])}\n                    {renderBioBlock('Niklas Bobrovitz ', ['University of Oxford', 'University of Toronto'])}\n                    {renderBioBlock('Emily Boucher', ['University of Calgary'])}\n                    {renderBioBlock('Nathan Duarte', ['University of Waterloo'])}\n                    {renderBioBlock('Hannah Rahim', ['University of Calgary'])}\n                    {renderBioBlock('Tingting Yan', ['University of Toronto'])}\n                </div>\n                <p>\n                    Please direct research-related inquiries to <a href=\"mailto:niklas.bobrovitz@mail.utoronto.ca\">niklas.bobrovitz@mail.utoronto.ca</a>.\n                </p>\n                <h1>\n                    Data Science Team:\n                </h1>\n                <div className=\"bio-grid-container\">\n                    {renderBioBlock('Austin Atmaja', ['University of Waterloo'])}\n                    {renderBioBlock('Abel Joseph ', ['University of Waterloo'])}\n                    {renderBioBlock('Ewan May', ['University of Calgary'])}\n                    {renderBioBlock('Simona Rocco', ['University of Waterloo'])}\n                    {renderBioBlock('Jordan Van Wyk', ['University of Waterloo'])}\n                </div>\n                <p>\n                    Please direct website-related inquiries to <a href=\"mailto:jordan.vanwyk@uwaterloo.ca\">jordan.vanwyk@uwaterloo.ca</a>.\n                </p>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport './static.css';\nimport { Tab } from \"semantic-ui-react\";\n\nexport default function Home() {\n\n    const renderPane = (src: string) => {\n        return <Tab.Pane className=\"col-12 p-0\">\n            <iframe\n                title=\"airtable-embed\"\n                className=\"airtable-embed col-12 p-0\"\n                src={src}\n                width=\"85%\"\n                height=\"650\"\n            /></Tab.Pane>\n    }\n\n    const panes = [{\n        menuItem: 'Detailed Serosurvey Data (All)',\n        render: () => renderPane('https://airtable.com/embed/shrtxrrlZkOgzEl7O?backgroundColor=blue&viewControls=on')\n    },\n    {\n        menuItem: 'Serosurveys Reporting Prevalence',\n        render: () => renderPane('https://airtable.com/embed/shraXWPJ9Yu7ybowM?backgroundColor=blue&viewControls=on')\n    },\n    {\n        menuItem: 'Planned Serosurveys',\n        render: () => renderPane('https://airtable.com/embed/shr85cDHzwETbjgdu?backgroundColor=blue&viewControls=on')\n    }\n    ]\n\n    return (\n        <div className=\"page\">\n            <div className=\"static-content\">\n                <h1>\n                    About SeroTracker\n                </h1>\n                <p>\n                    As the acute phase of the COVID-19 pandemic passes its peak, many countries are accelerating investment in serological testing. Understanding population antibody patterns and potential immunity to SARS-CoV-2 is of great interest to clinicians, public health officials, and policymakers alike. Despite this priority, there have been no published systematic efforts to track or synthesize findings from ongoing SARS-CoV-2 serosurveys. \n                </p>\n                <p>\n                SeroTracker provides the first systematic up-to-date synthesis of SARS-CoV-2 serosurveillance projects globally. We screened 1,845 peer-reviewed articles, preprints, government reports, and media articles, identifying 23 studies reporting 42 prevalence estimates from 14 countries and 50 studies yet to report. Our full methods can be found <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://drive.google.com/file/d/1ckfyprYUoNZRkBPgzbFRfvf1IsXmxvRP/view?usp=sharing\">here</a>.\n                </p>\n\n                <h1>\n                    Our Data\n                </h1>\n                <p>\n                    The tables below gather our findings, including detailed information about each study, prevalence estimate, and the associated risk of bias. \n                </p>\n                <ul>\n                    <li>\n                        <p>\n                            <b>Detailed Serosurvey Data (all)</b> provides thorough data on all prevalence estimates, including both reported estimates and intended studies\n                        </p>\n                    </li>\n                    <li>\n                        <p>\n                            <b>Serosurveys Reporting Prevalence</b> mirrors Supplementary Table 1 in our manuscript, providing concise data on all reported seroprevalence estimates\n                        </p>\n                    </li>\n                    <li>\n                        <p>\n                            <b>Planned Serosurveys</b> mirrors Supplementary Table 2 in our manuscript, summarizing intended serosurveys\n                        </p>\n                    </li>\n                </ul>\n            </div>\n            <Tab className=\"col-10 p-0 airtable-embed vertical-spacer\" panes={panes} />\n        </div>\n    )\n}","import React, { createContext, Dispatch, useReducer } from \"react\";\nimport { AirtableRecord, Filters, State } from \"./types\";\n\nexport const AppContext = createContext({} as [State, Dispatch<Record<string, any>>]);\n\n// Note: filters = elements that user has chosen to filter by\n// filter_options = all the elements that users could filter by\nconst initialState: State = {\n  healthcheck: '',\n  airtable_records: [],\n  filtered_records: [],\n  filters: {\n    source_type: new Set(),\n    study_status: new Set(),\n    test_type: new Set(),\n    populations: new Set(),\n    country: new Set()\n  },\n  filter_options: {\n    source_type: new Set(),\n    study_status: new Set(),\n    test_type: new Set(),\n    populations: new Set(),\n    country: new Set()\n  },\n  updated_at: ''\n};\n\nfunction buildFilterFunction(filters: Record<string, any>) {\n  // Returns a function that can be used to filter an array of airtable records\n  return (record: Record<string, any>) => {\n    for (const filter_key in filters) {\n      if ((filters[filter_key] instanceof Set) && (filters[filter_key].size > 0)) {\n        if (record[filter_key] === null) {\n          return false;\n        }\n        // Handle case where field to be filtered is an array\n        if (Array.isArray(record[filter_key])) {\n          let in_filter = false;\n          // Iterate through the record's values and check if any of them\n          // match the values accepted by the filter\n          for (let i = 0; i < record[filter_key].length; i++) {\n            if (filters[filter_key].has(record[filter_key][i])) {\n              in_filter = true;\n              break;\n            }\n          }\n          if (!in_filter) {\n            return false;\n          }\n        }\n        else {\n          if (!(filters[filter_key].has(record[filter_key]))) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n}\n\nexport function filterRecords(filters: Filters, records: AirtableRecord[]) {\n  const filter_function = buildFilterFunction(filters);\n  const filtered_records = records.filter(filter_function);\n  return filtered_records;\n}\n\nfunction getFilterOptions(records: AirtableRecord[]) {\n  const filter_options: Filters = {\n    source_type: new Set(),\n    study_status: new Set(),\n    test_type: new Set(),\n    populations: new Set(),\n    country: new Set()\n  };\n\n  records.forEach((record: AirtableRecord) => {\n    if((record.seroprevalence !== null) && (record.denominator !== null)){\n      if(record.country) {\n        filter_options.country.add(record.country);\n      }\n      if(record.study_status) {\n        filter_options.study_status.add(record.study_status);\n      }\n      if(record.test_type) {\n        filter_options.test_type.add(record.test_type);\n      }\n      if(record.source_type) {\n        filter_options.source_type.add(record.source_type);\n      }\n      if(record.populations){\n        record.populations.forEach((population) => {\n          filter_options.populations.add(population);\n        })\n      }\n    }\n  });\n\n  return filter_options;\n}\n\nconst reducer = (state: State, action: Record<string, any>) => {\n  const new_filters: any = state.filters;\n  switch (action.type) {\n    case \"HEALTHCHECK\":\n      return {\n        ...state,\n        healthcheck: action.payload\n      };\n    case \"GET_AIRTABLE_RECORDS\":\n      return {\n        ...state,\n        airtable_records: action.payload.airtable_records,\n        filtered_records: filterRecords(state.filters, action.payload.airtable_records),\n        updated_at: action.payload.updated_at,\n        filter_options: getFilterOptions(action.payload.airtable_records)\n      }\n    case \"UPDATE_FILTER\":\n      new_filters[action.payload.filter_type] = new Set(action.payload.filter_value)\n      return {\n        ...state,\n        filters: new_filters,\n        filtered_records: filterRecords(new_filters, state.airtable_records)\n      }\n    default:\n      return state\n  }\n};\n\nexport const AppContextProvider = (props: Record<string, any>) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <AppContext.Provider\n      value={[state, dispatch]}>\n      {props.children}\n    </AppContext.Provider>\n  );\n};","import React, { useContext, useEffect, useState } from \"react\";\nimport { Link, Route, Switch, useLocation, Redirect } from \"react-router-dom\";\nimport './App.css';\nimport Icon from './assets/images/two-tone-light.svg';\nimport Data from \"./components/pages/Data\";\nimport Dashboard from \"./components/static/Dashboard\";\nimport About from './components/static/About';\nimport Home from './components/static/Home';\nimport { AppContext } from \"./context\";\nimport httpClient from \"./httpClient\";\n\n\n\nfunction App() {\n  const [tab, setTab] = useState(\"\");\n  const [state, dispatch] = useContext(AppContext);\n\n  // DATA\n  /*\n  useEffect(() => {\n    const api = new httpClient()\n    const getAirtableRecords = async () => {\n      const response = await api.getAirtableRecords()\n      dispatch({\n        type: 'GET_AIRTABLE_RECORDS',\n        payload: response\n      });\n    }\n    getAirtableRecords();\n  }, [dispatch])\n  */\n\n  // ROUTING TABS\n  const usePageViews = () => {\n    let location = useLocation();\n    useEffect(() => {\n      setTab(location.pathname)\n    }, [location]);\n  }\n  \n  usePageViews()\n\n  const getTabClass = (tabName: string) => {\n    return tabName === tab ? 'bold center' : 'regular center'\n  }\n\n  // AUTHENTICATION\n  let authStatus = false;\n\n  if (localStorage.hasOwnProperty('authenticated')) {\n    authStatus = localStorage.getItem('authenticated') !== null;\n  }\n  const [auth, setAuth] = useState(authStatus);\n\n  function setActiveTab(tab: string) {\n    setTab(tab)\n  }\n\n  function authenticate() {\n    setAuth(true);\n    // Workaround because only string values can be saved to localStorage\n    localStorage.setItem('authenticated', 'true');\n  }\n\n  return (\n    <div className=\"App-container\">\n      <div className=\"col-12 p-0 flex\">\n        <header className=\"App-header col-12 px-3\">\n          <div className=\"App-title py-3 flex center-item\">\n            <Link to=\"/Home\" className=\"flex\">\n              <img src={Icon} width={23} height={23} alt=\"\" />\n              <div className=\"col-auto px-2\" >SeroTracker</div>\n            </Link>\n          </div>\n          <div className=\"App-tabs col-sm-5 col-lg-3\">\n            <Link className={getTabClass('/Home')} to=\"/Home\">Home</Link>\n            <Link className={getTabClass('/Dashboard')} to=\"/Dashboard\">Dashboard</Link>\n            <Link className={getTabClass('/About')} to=\"/About\">About</Link>\n          </div>\n        </header>\n\n        <Switch>\n          <Route path=\"/About\">\n            <About />\n          </Route>\n          <Route path=\"/Dashboard\">\n            <Dashboard />\n          </Route>\n          <Route path=\"/Home\">\n            <Home />\n          </Route>\n          <Redirect exact from=\"/\" to=\"home\" />\n        </Switch>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from './App';\nimport { AppContextProvider } from './context';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <AppContextProvider>\n        <App />\n      </AppContextProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}