{"version":3,"sources":["assets/images/two-tone-light.svg","assets/images/two-tone-dark.svg","context.tsx","metaAnalysis.ts","types.ts","components/map/Legend.tsx","components/map/Map.tsx","components/charts/ReferencesTable.tsx","components/charts/Charts.tsx","components/CenterComponent.tsx","components/sidebar/left-sidebar/CountryList.tsx","components/sidebar/left-sidebar/TotalStats.tsx","components/sidebar/left-sidebar/LeftSidebar.tsx","components/sidebar/right-sidebar/Filters.tsx","components/sidebar/right-sidebar/LastUpdated.tsx","components/sidebar/right-sidebar/RightSidebar.tsx","components/pages/Data.tsx","components/static/About.tsx","components/static/Auth/Auth.tsx","components/static/Auth/AuthController.ts","components/static/Home.tsx","httpClient.ts","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","AppContext","createContext","initialState","healthcheck","airtable_records","filtered_records","filters","source_type","Set","study_status","test_type","populations","country","filter_options","updated_at","filterRecords","records","filter_function","record","filter_key","size","Array","isArray","in_filter","i","length","has","buildFilterFunction","filter","getFilterOptions","forEach","seroprevalence","denominator","add","population","reducer","state","action","new_filters","type","payload","filter_type","filter_value","AppContextProvider","props","useReducer","dispatch","Provider","value","children","aggregateRecords","var_sum","inv_var_sum","p_over_var_sum","n","variance","error","Math","sqrt","getAggregateData","aggregation_factor","grouped_records","aggregationString","toString","groupRecords","group","aggregate_data","name","result","push","AggregationFactor","Legend","map","useLeaflet","buckets","getColor","useEffect","legend","control","L","position","DomUtil","remove","onAdd","div","create","labels","index","from","to","innerHTML","join","addTo","removeControl","Map","mapRef","createRef","geoJsonRef","useContext","useState","Countries","mapRecords","setMapRecords","random","forceUpdate","setForceUpdate","colors","prevalenceCountryDict","reduce","a","x","importGeo","features","feature","properties","logit","maxSeroprevalence","max","apply","o","step","percentage","decimal","log","getLogit","ceil","logitStep","parseFloat","exp","toFixed","getBuckets","d","highlightFeature","e","layer","target","setStyle","weight","color","dashArray","fillOpacity","zIndex","bringToFront","zoomToFeature","current","leafletElement","fitBounds","getBounds","resetHighlight","opacity","bounds","latLngBounds","maxBounds","mapboxAccessToken","process","REACT_APP_MAPBOX_API_KEY","ref","center","zoom","className","bounceAtZoomLimits","minZoom","enableHighAccuracy","maxBoundsViscosity","TileLayer","url","attribution","tileSize","id","zoomOffset","GeoJSON","onEachFeature","bindPopup","closeButton","autoPan","on","mouseover","openPopup","mouseout","closePopup","mousemove","getPopup","setLatLng","latlng","click","key","data","style","fillColor","ReferencesTable","column","setColumn","activePage","setActivePage","boundaryRange","siblingRange","totalPages","setTotalPages","direction","setDirection","setData","handleSort","clickedColumn","newData","_","sortBy","reverse","splicedData","splice","Table","celled","sortable","fixed","Header","Row","HeaderCell","sorted","onClick","Body","article_name","Cell","href","Footer","Pagination","onPageChange","event","Charts","yAxisSelection","setYAxis","aggregatedRecords","setRecords","yAxisOptions","text","reAggregatedRecords","chartData","CustomTooltip","active","label","Dropdown","placeholder","fluid","selection","onChange","options","width","height","layout","strokeDasharray","dataKey","longestWord","getYAxisWidth","content","fill","y","textAnchor","dominantBaseline","strokeWidth","CentralPiece","showMap","setShowMap","getClass","shouldHighlight","CountryList","aggregatedData","TotalStats","countries","LeftSidebar","Filters","formatOptions","formatted_options","buildFilterDropdown","multiple","search","addFilter","LastUpdated","RightSidebar","Data","About","renderBioBlock","description","line","Auth","passEntry","setPassEntry","Card","src","Img","alt","Content","onSubmit","password","preventDefault","crypto","decrypt","Utf8","authenticate","alert","Input","focus","Button","primary","Home","renderPane","Tab","Pane","title","panes","menuItem","render","rel","httpClient","fetch","res","status","console","json","response_json","this","httpGet","response","item","ARTICLE_NAME","authors","AUTHORS","institution","INSTITUTION","approving_regulator","APPROVING_REGULATOR","SOURCE_TYPE","STUDY_STATUS","TEST_TYPE","isotopes_reported","ISOTOPED_REPORTED","COUNTRY","POPULATIONS_STUDIED","numerator","NUMERATOR_VALUE","DENOMINATOR_VALUE","SERUM_POSITIVE_PREVALENCE","URL","App","tab","setTab","api","getAirtableRecords","location","useLocation","pathname","usePageViews","getTabClass","tabName","authStatus","localStorage","hasOwnProperty","getItem","auth","setAuth","setItem","Icon","path","exact","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.77d7702c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/two-tone-light.59be83b8.svg\";","module.exports = __webpack_public_path__ + \"static/media/two-tone-dark.fdcc9cf6.svg\";","import React, { createContext, Dispatch, useReducer } from \"react\";\nimport { AirtableRecord, Filters, State } from \"./types\";\n\nexport const AppContext = createContext({} as [State, Dispatch<Record<string, any>>]);\n\n// Note: filters = elements that user has chosen to filter by\n// filter_options = all the elements that users could filter by\nconst initialState: State = {\n  healthcheck: '',\n  airtable_records: [],\n  filtered_records: [],\n  filters: {\n    source_type: new Set(),\n    study_status: new Set(),\n    test_type: new Set(),\n    populations: new Set(),\n    country: new Set()\n  },\n  filter_options: {\n    source_type: new Set(),\n    study_status: new Set(),\n    test_type: new Set(),\n    populations: new Set(),\n    country: new Set()\n  },\n  updated_at: ''\n};\n\nfunction buildFilterFunction(filters: Record<string, any>) {\n  // Returns a function that can be used to filter an array of airtable records\n  return (record: Record<string, any>) => {\n    for (const filter_key in filters) {\n      if ((filters[filter_key] instanceof Set) && (filters[filter_key].size > 0)) {\n        if (record[filter_key] === null) {\n          return false;\n        }\n        // Handle case where field to be filtered is an array\n        if (Array.isArray(record[filter_key])) {\n          let in_filter = false;\n          // Iterate through the record's values and check if any of them\n          // match the values accepted by the filter\n          for (let i = 0; i < record[filter_key].length; i++) {\n            if (filters[filter_key].has(record[filter_key][i])) {\n              in_filter = true;\n              break;\n            }\n          }\n          if (!in_filter) {\n            return false;\n          }\n        }\n        else {\n          if (!(filters[filter_key].has(record[filter_key]))) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n}\n\nexport function filterRecords(filters: Filters, records: AirtableRecord[]) {\n  const filter_function = buildFilterFunction(filters);\n  if(records) {\n    const filtered_records = records.filter(filter_function);\n    return filtered_records;\n  }\n  return [];\n  \n}\n\nfunction getFilterOptions(records: AirtableRecord[]) {\n  const filter_options: Filters = {\n    source_type: new Set(),\n    study_status: new Set(),\n    test_type: new Set(),\n    populations: new Set(),\n    country: new Set()\n  };\n\n  if(!records) {\n    return filter_options;\n  }\n  records.forEach((record: AirtableRecord) => {\n    if((record.seroprevalence !== null) && (record.denominator !== null)){\n      if(record.country) {\n        filter_options.country.add(record.country);\n      }\n      if(record.study_status) {\n        filter_options.study_status.add(record.study_status);\n      }\n      if(record.test_type) {\n        filter_options.test_type.add(record.test_type);\n      }\n      if(record.source_type) {\n        filter_options.source_type.add(record.source_type);\n      }\n      if(record.populations){\n        record.populations.forEach((population) => {\n          filter_options.populations.add(population);\n        })\n      }\n    }\n  });\n\n  return filter_options;\n}\n\nconst reducer = (state: State, action: Record<string, any>) => {\n  const new_filters: any = state.filters;\n  switch (action.type) {\n    case \"HEALTHCHECK\":\n      return {\n        ...state,\n        healthcheck: action.payload\n      };\n    case \"GET_AIRTABLE_RECORDS\":\n      return {\n        ...state,\n        airtable_records: action.payload.airtable_records,\n        filtered_records: filterRecords(state.filters, action.payload.airtable_records),\n        updated_at: action.payload.updated_at,\n        filter_options: getFilterOptions(action.payload.airtable_records)\n      }\n    case \"UPDATE_FILTER\":\n      new_filters[action.payload.filter_type] = new Set(action.payload.filter_value)\n      return {\n        ...state,\n        filters: new_filters,\n        filtered_records: filterRecords(new_filters, state.airtable_records)\n      }\n    default:\n      return state\n  }\n};\n\nexport const AppContextProvider = (props: Record<string, any>) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <AppContext.Provider\n      value={[state, dispatch]}>\n      {props.children}\n    </AppContext.Provider>\n  );\n};","import { AirtableRecord, AggregationFactor } from \"./types\"\n\nconst Z_SCORE: number = 1.96;\n\nexport function aggregateRecords(records: AirtableRecord[]) {\n    let var_sum = 0;\n    let inv_var_sum = 0;\n    let p_over_var_sum = 0;\n    let n = 0;\n\n    records.forEach((record: AirtableRecord) => {\n        if ((record.seroprevalence !== null) && (record.denominator !== null)) {\n            const variance = (record.seroprevalence * (1 - record.seroprevalence)) / record.denominator;\n            var_sum = var_sum + variance;\n            inv_var_sum = inv_var_sum + (1 / variance);\n            p_over_var_sum = p_over_var_sum + (record.seroprevalence / variance);\n            n = n + record.denominator;\n        }\n    });\n\n    return {\n        seroprevalence: p_over_var_sum / inv_var_sum * 100,\n        error: Z_SCORE * Math.sqrt(var_sum) * 100,\n        n\n    }\n}\n\n// Given an aggregation factor (either 'country' or 'populations')\n// get pooled seroprevalence, error bounds, and n (total number of tests) for each country or population\nexport function getAggregateData(records: AirtableRecord[], aggregation_factor: AggregationFactor) {\n    const grouped_records: Record<string, AirtableRecord[]> = {}\n    const aggregationString: string = aggregation_factor.toString();\n    records.forEach((record: AirtableRecord) => {\n        if ((record.seroprevalence !== null) && (record.denominator !== null) && (record[aggregationString as \"country\" | \"populations\"] != null)) {\n            if (aggregationString === 'country') {\n                groupRecords(grouped_records, record, record.country!)\n            }\n            else {\n                record.populations!.forEach((group) => {\n                    groupRecords(grouped_records, record, group)\n                })\n            }\n        }\n    });\n\n\n    const aggregate_data: Record<string, string | number>[] = []\n\n    for (const name in grouped_records) {\n        const result = aggregateRecords(grouped_records[name]);\n        aggregate_data.push({ ...result, name });\n    }\n    return aggregate_data;\n}\n\nfunction groupRecords(grouped_records: Record<string, AirtableRecord[]>, record: AirtableRecord, group: string) {\n    if (group in grouped_records) {\n        grouped_records[group].push(record);\n    }\n    else {\n        grouped_records[group] = [record];\n    }\n}","export type AirtableRecord = {\n    article_name: string,\n    authors?: string | null,\n    institution?: string | null,\n    approving_regulator?: string | null,\n    source_type: string | null,\n    study_status: string | null,\n    test_type: string | null,\n    isotopes_reported?: string[] | null\n    country: string | null,\n    populations: string[] | null,\n    numerator?: number | null,\n    denominator: number | null,\n    seroprevalence: number | null,\n    url?: string | null,\n};\n\n// Each filter will be a javascript set\n// TODO: find typing to represent sets\nexport type Filters = {\n    source_type: any,\n    study_status: any,\n    test_type: any,\n    country: any,\n    populations: any\n};\n\nexport type FilterType =  'country' | 'populations' | 'study_status' | 'test_type' | 'source_type'\n\nexport type State = {\n    healthcheck: string,\n    airtable_records: AirtableRecord[],\n    filtered_records: AirtableRecord[],\n    filters: Filters,\n    filter_options: Filters,\n    updated_at: string\n};\n\nexport enum AggregationFactor {\n    country = 'country',\n    population = 'populations'\n}\n","import { useLeaflet } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport { useEffect } from \"react\";\r\nimport \"./Legend.css\"\r\ninterface legendProps {\r\n  buckets: number[],\r\n  getColor: (d: number | null) => string\r\n}\r\n\r\nconst Legend = (props: legendProps) => {\r\n  const { map } = useLeaflet();\r\n  const buckets = props.buckets as number[]\r\n  const getColor = props.getColor;\r\n  useEffect(() => {\r\n    const control = L.control as any\r\n    const legend = control({ position: \"bottomright\" });\r\n    // apparently this is not caught in the typings so I have to any it\r\n    L.DomUtil.remove(legend)\r\n    legend.onAdd = () => {\r\n      const div = L.DomUtil.create(\"div\", \"info flex legend center-item\");\r\n      const title = '<h4 className=\"legend-title col-12 p-0 flex middle\">Seroprevalence (logit scale) </h4>'\r\n      const labels = buckets.map((value, index) => {\r\n        if (index !== buckets.length) {\r\n          const from = value;\r\n          const to = buckets[index + 1]\r\n          // TODO: Check into passing in an array of colours instead of the getColor function\r\n          return `<div className=\"col-12 p-0 flex\">\r\n                    <div className=\"col-12 p-0\"> ${from}%${to ? \"&ndash;\" + to + \"%\" : \"+\"}</div>\r\n                    <i className=\"legend col-12 p-0\"style=\"background:${getColor(from)}\"></i>\r\n                  </div>`\r\n        }\r\n      })\r\n      labels.push(title);\r\n      div.innerHTML = labels.join(\"\");\r\n      return div;\r\n    };\r\n    legend.addTo(map);\r\n\r\n    return () => {\r\n      map?.removeControl(legend);\r\n    }\r\n  });\r\n\r\n  return null;\r\n};\r\n\r\nexport default Legend;\r\n","import L, { latLngBounds, Layer, LeafletMouseEvent } from \"leaflet\";\nimport React, { createRef, useContext, useEffect, useState, useRef } from \"react\";\nimport { GeoJSON, Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport Countries from \"../../assets/countries-geo.json\";\nimport { AppContext } from \"../../context\";\nimport { getAggregateData } from \"../../metaAnalysis\";\nimport Legend from \"./Legend\";\nimport './Map.css';\nimport { AggregationFactor } from \"../../types\";\n\nexport default function Map() {\n  const mapRef = createRef<LeafletMap>();\n  const geoJsonRef = createRef<GeoJSON>();\n  const [state] = useContext(AppContext);\n  const [mapRecords, setMapRecords] = useState(Countries as any);\n  const [forceUpdate, setForceUpdate] = useState(Math.random());\n\n  const colors = [\n    '#76E57F', '#62CA7C', '#4FB079', '#3B9577', '#277A74', '#146071', '#00456E', \"#EEEEEE\"\n  ]\n\n  useEffect(() => {\n    const prevalenceCountryDict = getAggregateData(state.filtered_records, AggregationFactor.country).reduce((a, x) => ({ ...a, [x.name]: x.seroprevalence }), {})\n    const importGeo = Countries as any;\n    const features = importGeo.features as GeoJSON.Feature[]\n    importGeo.features = features.map(feature => {\n      const seroprevalence = prevalenceCountryDict[feature?.properties?.name as string];\n      if (seroprevalence) {\n        return { ...feature, properties: { ...feature.properties, seroprevalence } }\n      }\n      return { ...feature, properties: { ...feature.properties, seroprevalence: null } }\n    })\n    setMapRecords(importGeo)\n    // we need to update the key on the GEOJSON to let react know it's time to rerender\n    setForceUpdate(Math.random())\n  }, [state.filtered_records])\n\n\n  const style = (feature: GeoJSON.Feature<GeoJSON.Geometry, any> | undefined) => {\n    return {\n      fillColor: getColor(feature?.properties?.seroprevalence),\n      weight: 1,\n      opacity: 1,\n      color: 'white',\n      dashArray: '0',\n      fillOpacity: 0.7,\n      zIndex: 650\n    }\n  }\n\n  // Abstract to utils\n  const getLogit = (percentage: number) => {\n    const decimal = percentage / 100;\n    return Math.log(decimal) - Math.log(1 - decimal);\n  }\n\n  // Abstract to utils\n  const getDecimalFromLogit = (logit: number) => {\n    return Math.exp(logit) / (Math.exp(logit) + 1) * 100\n  }\n\n  // Abstract to utils\n  const getBuckets = (features: GeoJSON.Feature[]) => {\n    const maxSeroprevalence = Math.max.apply(Math, features.filter(o => o.properties?.seroprevalence).map((o) => o?.properties?.seroprevalence));\n    const roundedMax = Math.ceil(maxSeroprevalence);\n    const maxLogit = getLogit(roundedMax);\n    const lowerEnd = -7;\n    const differenceScale = maxLogit - lowerEnd\n    const bucketSegments = 6\n    const step = differenceScale / bucketSegments;\n    const buckets = [0];\n    for (let x = 1; x <= 6; x++) {\n      const logitStep = parseFloat(getDecimalFromLogit(-7 + step * x).toFixed(1));\n      buckets.push(logitStep);\n    }\n    return buckets;\n  }\n\n  const buckets: Array<number> = getBuckets(mapRecords.features);\n\n  // TODO: abstract this to utils function\n  const getColor = (d: number | null) => {\n    if (d === null) {\n      return colors[7];\n    }\n    return d < buckets[1] ? colors[0] :\n      d < buckets[2] ? colors[1] :\n        d < buckets[3] ? colors[2] :\n          d < buckets[4] ? colors[3] :\n            d < buckets[5] ? colors[4] :\n              d < buckets[6] ? colors[5] :\n                colors[6]\n  }\n\n  //TODO: add in typing for event\n  const highlightFeature = (e: any) => {\n    const layer = e.target;\n    layer.setStyle({\n      weight: 5,\n      color: '#666',\n      dashArray: '',\n      fillOpacity: 0.7,\n      zIndex: 200\n    });\n    layer.bringToFront();\n\n  }\n\n  //TODO: add in typing for event\n  const zoomToFeature = (e: any) => {\n    const map = mapRef?.current?.leafletElement\n    map?.fitBounds(e.target.getBounds());\n  };\n\n  //TODO: add in typing for event\n  const resetHighlight = (e: any) => {\n    const layer = e.target;\n\n    layer.setStyle({\n      weight: 2,\n      opacity: 1,\n      color: 'white',\n      dashArray: '3',\n      fillOpacity: 0.7\n    });\n  };\n\n  // This method sets all the functionality for each GeoJSON item\n  const onEachFeature = (feature: GeoJSON.Feature, layer: Layer) => {\n    if (feature.properties?.seroprevalence) {\n      layer.bindPopup(`${feature.properties.name}: ${feature.properties?.seroprevalence.toFixed(2)}%`, { closeButton: false, autoPan: false });\n    }\n    else {\n      layer.bindPopup(`${feature.properties?.name}: No data recorded`, { closeButton: false, autoPan: false });\n    }\n\n    layer.on({\n      mouseover: () => { layer.openPopup() },\n      mouseout: () => { layer.closePopup(); },\n      mousemove: (e: LeafletMouseEvent) => {\n        layer.getPopup()?.setLatLng(e.latlng);\n      }\n    })\n    layer.on({\n      mouseover: highlightFeature,\n      mouseout: resetHighlight,\n      click: zoomToFeature\n    })\n  }\n\n  const bounds = latLngBounds([-90, -200], [90, 180]);\n  const maxBounds = latLngBounds([-90, -200], [90, 200]);\n\n  const mapboxAccessToken = process.env.REACT_APP_MAPBOX_API_KEY;\n  return (\n    <LeafletMap\n      ref={mapRef}\n      center={[0, 0]}\n      zoom={2}\n      className=\"map w-100\"\n      bounceAtZoomLimits={true}\n      bounds={bounds}\n      minZoom={2}\n      maxBounds={maxBounds}\n      enableHighAccuracy={true}\n      maxBoundsViscosity={1}\n    >\n      <TileLayer\n        url={'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=' + mapboxAccessToken}\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        tileSize={512}\n        id='mapbox/light-v9'\n        zoomOffset={-1}>\n      </TileLayer>\n      <GeoJSON\n        onEachFeature={onEachFeature}\n        ref={geoJsonRef}\n        key={forceUpdate}\n        data={mapRecords as GeoJSON.GeoJsonObject}\n        style={(data) => style(data)}>\n      </GeoJSON>\n      <Legend buckets={buckets} getColor={getColor} />\n    </LeafletMap>\n  );\n}\n","import _ from 'lodash';\r\nimport React, { useContext, useState, useEffect } from \"react\";\r\nimport { Table, Pagination } from \"semantic-ui-react\";\r\nimport { AppContext } from \"../../context\";\r\nimport './Charts.css';\r\n\r\nexport default function ReferencesTable() {\r\n  const [column, setColumn] = useState('');\r\n  const [state, dispatch] = useContext(AppContext);\r\n  const [activePage, setActivePage] = useState(1);\r\n  const [boundaryRange, setBoundaryRange] = useState(1);\r\n  const [siblingRange, setSiblingRange] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(10);\r\n\r\n  const handlePaginationChange = (e: any, event: any) => {\r\n    const { activePage } = event;\r\n    setActivePage(activePage)\r\n  }\r\n\r\n\r\n  const [direction, setDirection] = useState('ascending');\r\n  const [data, setData] = useState(state.filtered_records);\r\n\r\n  const handleSort = (clickedColumn: string) => () => {\r\n    if (column !== clickedColumn) {\r\n      setColumn(clickedColumn);\r\n      setDirection('ascending');\r\n      return\r\n    }\r\n    else {\r\n      setDirection(direction === 'ascending' ? 'descending' : 'ascending');\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const newData = _.sortBy(state.filtered_records, [column]);\r\n    setData(newData);\r\n    if (direction === 'descending') {\r\n      setData(newData.reverse());\r\n    }\r\n\r\n    const pageLength = 5;\r\n    const splicedData = newData.splice((activePage - 1) * pageLength, pageLength);\r\n    setData(splicedData);\r\n    setTotalPages(Math.ceil(state.filtered_records.length / pageLength));\r\n  }, [activePage, column, direction, state.filtered_records])\r\n\r\n  return (\r\n    <div className=\"container col-10 m-4 center-item flex\">\r\n      <div className=\"col-12 px-0 py-3 section-title\">\r\n        REFERENCES\r\n      </div>\r\n      <Table celled sortable fixed className=\"mb-3 mt-0\">\r\n        <Table.Header>\r\n          <Table.Row>\r\n            <Table.HeaderCell\r\n              sorted={column === 'title' ? direction as any : null}\r\n              onClick={handleSort('title')}\r\n            >\r\n              Name\r\n          </Table.HeaderCell>\r\n            <Table.HeaderCell\r\n              sorted={column === 'country' ? direction as any : null}\r\n              onClick={handleSort('country')}\r\n            >\r\n              Country\r\n          </Table.HeaderCell>\r\n            <Table.HeaderCell\r\n              sorted={column === 'populations' ? direction as any : null}\r\n              onClick={handleSort('populations')}\r\n            >\r\n              Populations\r\n          </Table.HeaderCell>\r\n            <Table.HeaderCell\r\n              sorted={column === 'denominator' ? direction as any : null}\r\n              onClick={handleSort('denominator')}\r\n            >\r\n              N\r\n          </Table.HeaderCell>\r\n            <Table.HeaderCell\r\n              sorted={column === 'seroprevalence' ? direction as any : null}\r\n              onClick={handleSort('seroprevalence')}\r\n            >\r\n              Prevalence (%)\r\n          </Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <Table.Body>\r\n          {_.map(data, ({ article_name, country, denominator, populations, seroprevalence, url }) => (\r\n            <Table.Row key={Math.random()}>\r\n              <Table.Cell><a href={url ? url : '#'} target=\"_blank\">{article_name}</a></Table.Cell>              \r\n              <Table.Cell>{country}</Table.Cell>\r\n              <Table.Cell>{populations}</Table.Cell>\r\n              <Table.Cell>{denominator}</Table.Cell>\r\n              <Table.Cell>{seroprevalence ? (seroprevalence * 100).toFixed(2) : \"No prevalence data\"}</Table.Cell>\r\n            </Table.Row>\r\n          ))}\r\n        </Table.Body>\r\n        <Table.Footer>\r\n          <Pagination\r\n            activePage={activePage}\r\n            boundaryRange={boundaryRange}\r\n            onPageChange={handlePaginationChange}\r\n            size='mini'\r\n            siblingRange={siblingRange}\r\n            totalPages={totalPages}\r\n          />\r\n        </Table.Footer>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n","import _ from \"lodash\";\r\nimport React, { useContext, useEffect, useState, SyntheticEvent } from \"react\";\r\nimport { Bar, BarChart, CartesianGrid, ErrorBar, LabelList, Legend, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\r\nimport { Dropdown, DropdownProps } from \"semantic-ui-react\";\r\nimport { AppContext } from \"../../context\";\r\nimport { getAggregateData } from \"../../metaAnalysis\";\r\nimport './Charts.css';\r\nimport ReferencesTable from \"./ReferencesTable\";\r\nimport { AggregationFactor } from \"../../types\";\r\n\r\nexport default function Charts() {\r\n  const [yAxisSelection, setYAxis] = useState(AggregationFactor.country);\r\n  const [state] = useContext(AppContext);\r\n  const { filtered_records } = state;\r\n  const aggregatedRecords = getAggregateData(filtered_records, yAxisSelection);\r\n  const [records, setRecords] = useState(aggregatedRecords);\r\n\r\n  const yAxisOptions = [\r\n    { key: 'Population', text: 'Population', value: AggregationFactor.population },\r\n    { key: 'Geographies', text: 'Geographies', value: AggregationFactor.country }\r\n  ]\r\n\r\n  useEffect(() => {\r\n    const reAggregatedRecords = getAggregateData(filtered_records, yAxisSelection);\r\n    const chartData = _.sortBy(reAggregatedRecords, 'seroprevalence').reverse();\r\n    setRecords(chartData);\r\n  }, [yAxisSelection, state, filtered_records])\r\n\r\n  const handleChange = (event: SyntheticEvent<HTMLElement, Event>, data: DropdownProps) => {\r\n    setYAxis(data.value as AggregationFactor);\r\n  }\r\n\r\n  const CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload) {\r\n      return (\r\n        <div className=\"custom-tooltip\">\r\n          <p className=\"label\">{`${label} : ${payload[0].value.toFixed(2)}`}</p>\r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  };\r\n\r\n\r\n  const renderCustomizedLabel = (props: any) => {\r\n    const { x, y, width, height, value } = props;\r\n    return (\r\n      <g>\r\n        <text x={x + width + 10} y={y + height / 2} fill=\"#000\" textAnchor=\"right\" dominantBaseline=\"right\">\r\n          {value.toFixed(2)}\r\n        </text>\r\n      </g>\r\n    );\r\n  };\r\n\r\n  const getYAxisWidth = (chartData: Record<string, string | number>[]) => {\r\n    let longestWord = 0;\r\n    chartData.filter(o => o.name)\r\n      .forEach(o => {\r\n        const country = o.name as string;\r\n        longestWord = country.length > longestWord ? country.length : longestWord;\r\n      })\r\n    return longestWord;\r\n  }\r\n\r\n  return (\r\n    <div className=\"charts-page flex\">\r\n      <div className=\"charts container col-10 center-item flex\">\r\n        <div className=\"col-12 p-0 center-item flex\">\r\n          <div className=\"col-3\">\r\n          </div>\r\n          <div className=\"charts-title flex col-6\">\r\n            <div className=\"col-auto flex center-item\">\r\n              Seroprevalence by\r\n            </div>\r\n            <Dropdown\r\n              placeholder='Geographies'\r\n              fluid selection\r\n              className=\"col large-dropdown\"\r\n              onChange={handleChange}\r\n              options={yAxisOptions}\r\n            >\r\n            </Dropdown>\r\n          </div>\r\n          <div className=\" col-3 flex top right\">\r\n            95% CI\r\n          </div>\r\n        </div>\r\n        <ResponsiveContainer width=\"80%\" height=\"80%\">\r\n          <BarChart data={records} layout='vertical'>\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <XAxis type=\"number\" name=\"Seroprevalence (%)\" />\r\n            <YAxis dataKey=\"name\" type=\"category\" width={getYAxisWidth(records) * 7} />\r\n            <Tooltip content={<CustomTooltip />} />\r\n            <Legend />\r\n            <Bar dataKey=\"seroprevalence\" name=\"Seroprevalence (%)\" fill=\"#55A6BA\">\r\n              <LabelList dataKey=\"seroprevalence\" position=\"right\" content={renderCustomizedLabel} />\r\n              <ErrorBar dataKey=\"error\" width={4} strokeWidth={2}/>\r\n            </Bar>\r\n          </BarChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n      <ReferencesTable />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport Map from './map/Map';\r\nimport './Component.css'\r\nimport Charts from \"./charts/Charts\";\r\n\r\nexport default function CentralPiece() {\r\n  const [showMap, setShowMap] = useState(true);\r\n\r\n  const getClass = (shouldHighlight: boolean) => {\r\n    if(shouldHighlight === showMap) {\r\n      return 'center-highlighted'\r\n    }\r\n    return 'center-regular'\r\n  }\r\n\r\n  const displayCenter = () => {\r\n    return showMap ? <Map/> : <Charts />\r\n  }\r\n  return (\r\n    <div className=\"col-12 p-0\">\r\n      <div className=\"center-button flex\">\r\n          <div className={`center-item left-button ${getClass(true)}`} onClick={() => setShowMap(true)}>\r\n            Explore\r\n          </div>\r\n          <div className={`right-button ${getClass(false)}`} onClick={() => setShowMap(false)}>\r\n            Analyze\r\n          </div>\r\n      </div>\r\n      {displayCenter()}\r\n    </div>\r\n  );\r\n}\r\n","import _ from \"lodash\";\r\nimport React, { useContext } from \"react\";\r\nimport { AppContext } from \"../../../context\";\r\nimport { getAggregateData } from \"../../../metaAnalysis\";\r\nimport { AggregationFactor } from \"../../../types\";\r\nimport './CountryList.css';\r\n\r\nexport default function CountryList() {\r\n  const [state] = useContext(AppContext);\r\n\r\n  const aggregatedData = _.sortBy(getAggregateData(state.filtered_records, AggregationFactor.country), ['seroprevalence']).reverse();\r\n\r\n  return (\r\n    <div className=\"col-12 px-0 country-list-container\">\r\n      <div className=\"section-title py-2 center\">\r\n        COUNTRIES BY SEROPREVALENCE\r\n      </div>\r\n      <div className=\"item-list-container\">\r\n        {aggregatedData.map(o => {\r\n          return (\r\n            <div className=\"col-12 p-0 flex item-container\" key={Math.random()}>\r\n              <div className=\"p-2 country-name\">\r\n                {o.name}\r\n              </div>\r\n              <div className=\"p-2 country-stat\">\r\n                {(o.seroprevalence as Number).toFixed(2)}\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../../../context\";\r\nimport { aggregateRecords } from \"../../../metaAnalysis\";\r\nimport './TotalStats.css';\r\n\r\nexport default function TotalStats() {\r\n  const [state] = useContext(AppContext);\r\n\r\n  const { seroprevalence, n } = aggregateRecords(state.filtered_records);\r\n  const countries = state.filter_options.country.size\r\n\r\n  return (\r\n    <div className=\"col-12 p-0\">\r\n      <div className=\"col-12 py-3 section-title center\">SUMMARY STATISTICS</div>\r\n      <div className=\"col-12 p-0 flex\">\r\n          <div className=\"main-statistic-title col-12 p-0 center\">Seroprevalence</div>\r\n          <div className=\"main-statistic col-12 p-0 center\">{seroprevalence.toFixed(2)}%</div>\r\n      </div>\r\n      <div className=\"col-12 flex middle py-4\">\r\n          <div className=\"secondary-statistic-title center p-0 col-12\">Tests Administered</div>\r\n          <div className=\"secondary-statistic col-12 p-0 center\">{n}</div>\r\n      </div>\r\n      <div className=\"col-12 flex middle py-2\">\r\n          <div className=\"secondary-statistic px-1 center\">{countries}</div>\r\n          <div className=\"secondary-statistic-title px-1 center\">Countries</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport CountryList from \"./CountryList\";\r\nimport TotalStats from \"./TotalStats\";\r\nimport \"../sidebar.css\"\r\n\r\nexport default function LeftSidebar() {\r\n  return (\r\n    <div className=\"col-12 p-0 sidebar-container\">\r\n      <TotalStats/>\r\n      <CountryList/>\r\n    </div>\r\n  )\r\n}","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../../../context\";\r\nimport { Dropdown } from 'semantic-ui-react'\r\nimport {FilterType} from '../../../types';\r\n\r\nexport default function Filters() {\r\n  const [state, dispatch] = useContext(AppContext);\r\n\r\n  const formatOptions = (options: any) => {\r\n    const formatted_options: Record<string, string>[] = [];\r\n    options.forEach((o: string) => {\r\n      formatted_options.push({\r\n        key: o,\r\n        text: o,\r\n        value: o\r\n      })\r\n    });\r\n    return formatted_options;\r\n  }\r\n\r\n  const addFilter = (data: any, filter_type: string) => {\r\n    dispatch({\r\n      type: 'UPDATE_FILTER',\r\n      payload: {\r\n        filter_type,\r\n        filter_value: data.value\r\n      }\r\n    });\r\n  }\r\n\r\n  const buildFilterDropdown = (filter_type: FilterType, placeholder: string) => {\r\n    return(\r\n      <div className=\"pb-3\">\r\n        <div className=\"pb-2\">\r\n          {placeholder}\r\n        </div>\r\n        <Dropdown \r\n          placeholder={placeholder}\r\n          fluid\r\n          multiple\r\n          search \r\n          selection \r\n          options={formatOptions(state.filter_options[filter_type])}\r\n          onChange={(e: any, data: any) => {addFilter(data, filter_type)}} \r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"col-12 p-0\">\r\n      <div className=\"section-title py-3 center\">\r\n        FILTER\r\n      </div>\r\n      <div className=\"row justify-content-center\">\r\n        <div className=\"col-10 col align-items-center p-0\">\r\n          <div>\r\n            {buildFilterDropdown('country', 'Country')}\r\n          </div> \r\n          <div>\r\n            {buildFilterDropdown('study_status', 'Study Status')}\r\n          </div> \r\n          <div>\r\n            {buildFilterDropdown('source_type', 'Source Type')}\r\n          </div> \r\n          <div>\r\n            {buildFilterDropdown('test_type', 'Test Type')}\r\n          </div> \r\n          <div>\r\n            {buildFilterDropdown('populations', 'Population')}\r\n          </div> \r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../../../context\";\r\n\r\nexport default function LastUpdated() {\r\n  const [state, dispatch] = useContext(AppContext);\r\n\r\n  return (\r\n    <div className=\"col-12 pb-4\">\r\n      <div className=\"section-title center\">\r\n        LAST UPDATED\r\n      </div>\r\n      <div className=\"py-2 center\">\r\n        {state.updated_at}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport Filters from \"./Filters\";\r\nimport LastUpdated from \"./LastUpdated\";\r\nimport \"../sidebar.css\"\r\n\r\nexport default function RightSidebar() {\r\n  return (\r\n    <div className=\"col-12 p-0 d-flex flex-column justify-content-between sidebar-container\">\r\n      <div>\r\n        <Filters/>\r\n      </div>\r\n      <div>\r\n        <LastUpdated/>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { useState } from \"react\";\r\nimport CentralPiece from \"../CenterComponent\";\r\nimport LeftSidebar from \"../sidebar/left-sidebar/LeftSidebar\";\r\nimport RightSidebar from \"../sidebar/right-sidebar/RightSidebar\";\r\n\r\nexport default function Data() {\r\n  return (\r\n    <div className=\"col-12 p-0 flex\">\r\n      <div className=\"col-2 p-0\">\r\n        <LeftSidebar />\r\n      </div>\r\n      <div className=\"col-8 p-0\">\r\n        <CentralPiece />\r\n      </div>\r\n      <div className=\"col-2 p-0\">\r\n        <RightSidebar />\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\nimport './static.css';\n\nexport default function About() {\n\n    function renderBioBlock(name: string, description: string[]){\n        return (\n            <div>\n                <b>\n                    {name}\n                </b>\n                <br/>\n                {description.map((line) => {\n                    return (\n                        <div>\n                            {line}\n                            <br/>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }\n    return (\n        <div className=\"page col-12\">\n            <div className=\"static-content\">\n                <h1>\n                    Scientific Lead:\n                </h1>\n                <div>\n                    {renderBioBlock('Tim Evans', ['Director, School of Population and Global Health, McGill University', 'Executive Director, Canadian COVID-19 Immunity Task Force'])}\n                </div>\n                <h1>\n                    Research Team:\n                </h1>\n                <div className=\"bio-grid-container\">\n                    {renderBioBlock('Rahul Arora', ['University of Oxford'])}\n                    {renderBioBlock('Niklas Bobrovitz ', ['University of Oxford', 'University of Toronto'])}\n                    {renderBioBlock('Emily Boucher', ['University of Calgary'])}\n                    {renderBioBlock('Nathan Duarte', ['University of Waterloo'])}\n                    {renderBioBlock('Hannah Rahim', ['University of Calgary'])}\n                    {renderBioBlock('Tingting Yan', ['University of Toronto'])}\n                </div>\n                <p>\n                    Please direct research-related inquiries to <a href=\"mailto:niklas.bobrovitz@mail.utoronto.ca\">niklas.bobrovitz@mail.utoronto.ca</a>.\n                </p>\n                <h1>\n                    Data Science Team:\n                </h1>\n                <div className=\"bio-grid-container\">\n                    {renderBioBlock('Austin Atmaja', ['University of Waterloo'])}\n                    {renderBioBlock('Abel Joseph ', ['University of Waterloo'])}\n                    {renderBioBlock('Ewan May', ['University of Calgary'])}\n                    {renderBioBlock('Simona Rocco', ['University of Waterloo'])}\n                    {renderBioBlock('Jordan Van Wyk', ['University of Waterloo'])}\n                </div>\n                <p>\n                    Please direct website-related inquiries to <a href=\"mailto:jordan.vanwyk@uwaterloo.ca\">jordan.vanwyk@uwaterloo.ca</a>.\n                </p>\n            </div>\n        </div>\n    )\n}","import React, { useState } from \"react\";\nimport { Input, Button, Card } from 'semantic-ui-react'\nimport { checkPassword } from \"./AuthController\"\nimport Img from '../../../assets/images/two-tone-dark.svg'\nexport default function Auth(props: Record<string, any>) {\n    const [passEntry, setPassEntry] = useState('');\n\n    function handleSubmit(e: any) {\n        e.preventDefault();\n        const passwordValid = checkPassword(passEntry);\n        if (passwordValid) {\n            props.authenticate();\n        }\n        else {\n            alert('Invalid password entered');\n        }\n    }\n\n    function handleChange(e: any) {\n        e.preventDefault();\n        setPassEntry(e.target.value)\n    }\n\n    return (\n        <div className=\"col-12 p-0 flex center-item\">\n            <Card className=\"col-sm-11 col-md-8 col-lg-4\">\n                <Card.Header className=\"flex p-3\">\n                <img src={Img} width={30} height={30} alt=\"React Logo\" />\n                <h2 className=\"col-auto m-0 flex\">SeroTracker</h2></Card.Header>\n                <Card.Content>\n                        <form onSubmit={handleSubmit} className=\"input-group col-12 px-0 center-item flex\">\n                            <Input\n                                focus\n                                type=\"password\"\n                                onChange={handleChange}\n                                value={passEntry}\n                                className=\"col my-1\"\n                                placeholder=\"Passphrase\" />\n                            <Button type=\"submit\" content=\"Submit\" className=\"col-auto my-1\" primary>\n                            </Button>\n                        </form>\n                </Card.Content>\n            </Card>\n        </div>\n    )\n}","import * as crypto from \"crypto-js\";\n\n// Note, this password protection method is intended for deterrence, not a robust security solution\nexport function checkPassword(password: string) {\n    const msg = \"decrypted string\"\n    const encrypted = \"U2FsdGVkX1/8XcUQ6PdvFxmM8rTNnwQeyb+MvIXh2hrwvoER4IWLu1It5+Hv/28K\";\n    const decryptedMsg = crypto.AES.decrypt(encrypted, password);\n    const passwordValid = decryptedMsg.toString(crypto.enc.Utf8) === msg;\n    return passwordValid;\n}","import React from \"react\";\nimport './static.css';\nimport { Tab } from \"semantic-ui-react\";\n\nexport default function Home() {\n\n    const renderPane = (src: string) => {\n        return <Tab.Pane className=\"col-12 p-0\">\n            <iframe\n                title=\"airtable-embed\"\n                className=\"airtable-embed col-12 p-0\"\n                src={src}\n                width=\"85%\"\n                height=\"650\"\n            /></Tab.Pane>\n    }\n\n    const panes = [{\n        menuItem: 'Detailed Serosurvey Data (All)',\n        render: () => renderPane('https://airtable.com/embed/shrtxrrlZkOgzEl7O?backgroundColor=blue&viewControls=on')\n    },\n    {\n        menuItem: 'Serosurveys Reporting Prevalence',\n        render: () => renderPane('https://airtable.com/embed/shraXWPJ9Yu7ybowM?backgroundColor=blue&viewControls=on')\n    },\n    {\n        menuItem: 'Planned Serosurveys',\n        render: () => renderPane('https://airtable.com/embed/shr85cDHzwETbjgdu?backgroundColor=blue&viewControls=on')\n    }\n    ]\n\n    return (\n        <div className=\"page\">\n            <div className=\"static-content\">\n                <h1>\n                    About SeroTracker\n                </h1>\n                <p>\n                    As the acute phase of the COVID-19 pandemic passes its peak, many countries are accelerating investment in serological testing. Understanding population antibody patterns and potential immunity to SARS-CoV-2 is of great interest to clinicians, public health officials, and policymakers alike. Despite this priority, there have been no published systematic efforts to track or synthesize findings from ongoing SARS-CoV-2 serosurveys. \n                </p>\n                <p>\n                SeroTracker provides the first systematic up-to-date synthesis of SARS-CoV-2 serosurveillance projects globally. We screened 1,845 peer-reviewed articles, preprints, government reports, and media articles, identifying 23 studies reporting 42 prevalence estimates from 14 countries and 50 studies yet to report. Our full methods can be found <a rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://drive.google.com/file/d/1ckfyprYUoNZRkBPgzbFRfvf1IsXmxvRP/view?usp=sharing\">here</a>.\n                </p>\n\n                <h1>\n                    Our Data\n                </h1>\n                <p>\n                    The tables below gather our findings, including detailed information about each study, prevalence estimate, and the associated risk of bias. \n                </p>\n                <ul>\n                    <li>\n                        <p>\n                            <b>Detailed Serosurvey Data (all)</b> provides thorough data on all prevalence estimates, including both reported estimates and intended studies\n                        </p>\n                    </li>\n                    <li>\n                        <p>\n                            <b>Serosurveys Reporting Prevalence</b> mirrors Supplementary Table 1 in our manuscript, providing concise data on all reported seroprevalence estimates\n                        </p>\n                    </li>\n                    <li>\n                        <p>\n                            <b>Planned Serosurveys</b> mirrors Supplementary Table 2 in our manuscript, summarizing intended serosurveys\n                        </p>\n                    </li>\n                </ul>\n            </div>\n            <Tab className=\"col-10 p-0 airtable-embed vertical-spacer\" panes={panes} />\n        </div>\n    )\n}","import { AirtableRecord } from \"./types\"\n\nexport default class httpClient {\n    async httpGet(url: string){\n        const res = await fetch(url);\n        if(res.status !== 200) {\n            console.error(res.status);\n            return;\n        }\n        else {\n            const response_json = await res.json();\n            return response_json;\n        }\n    }\n\n    async getHealthcheck() {\n        const healthcheck: string = await this.httpGet('http://localhost:5000/healthcheck');\n        return healthcheck;\n    }\n\n    async getAirtableRecords() {\n        const response = await this.httpGet('/airtable_scraper/records');\n        if(!response) {\n            return [];\n        }\n        const airtable_records = response.records!.map((item: Record<string, any>)=>{ \n            // Convert response to AirtableRecord type\n            const record: AirtableRecord = { \n                article_name: item.ARTICLE_NAME![0],\n                authors: item.AUTHORS ? item.AUTHORS[0]: null,\n                institution: item.INSTITUTION ? item.INSTITUTION[0] : null,\n                approving_regulator: item.APPROVING_REGULATOR ? item.APPROVING_REGULATOR[0]: null,\n                source_type: item.SOURCE_TYPE ? item.SOURCE_TYPE[0]: null,\n                study_status: item.STUDY_STATUS ? item.STUDY_STATUS[0]: null,\n                test_type: item.TEST_TYPE ? item.TEST_TYPE[0]: null,\n                isotopes_reported: item.ISOTOPED_REPORTED,\n                country: item.COUNTRY ? item.COUNTRY[0] : null,\n                populations: item.POPULATIONS_STUDIED,\n                numerator: item.NUMERATOR_VALUE,\n                denominator: item.DENOMINATOR_VALUE,\n                seroprevalence: item.SERUM_POSITIVE_PREVALENCE,\n                url: item.URL ? item.URL[0] : null\n            };\n\n            return record; \n        });\n\n        return {\n            airtable_records,\n            updated_at: response.updated_at!\n        };\n    }\n}","import React, { useContext, useEffect, useState } from \"react\";\nimport { Link, Route, Switch, useLocation, Redirect } from \"react-router-dom\";\nimport './App.css';\nimport Icon from './assets/images/two-tone-light.svg';\nimport Data from \"./components/pages/Data\";\nimport About from './components/static/About';\nimport Auth from './components/static/Auth/Auth';\nimport Home from './components/static/Home';\nimport { AppContext } from \"./context\";\nimport httpClient from \"./httpClient\";\n\n\n\nfunction App() {\n  const [tab, setTab] = useState(\"\");\n  const [state, dispatch] = useContext(AppContext);\n\n  // DATA\n  useEffect(() => {\n    const api = new httpClient()\n    const getAirtableRecords = async () => {\n      const response = await api.getAirtableRecords()\n      dispatch({\n        type: 'GET_AIRTABLE_RECORDS',\n        payload: response\n      });\n    }\n    getAirtableRecords();\n  }, [dispatch])\n\n  // ROUTING TABS\n  const usePageViews = () => {\n    let location = useLocation();\n    useEffect(() => {\n      setTab(location.pathname)\n    }, [location]);\n  }\n  \n  usePageViews()\n\n  const getTabClass = (tabName: string) => {\n    return tabName === tab ? 'bold col-4 center' : 'regular col-4 center'\n  }\n\n  // AUTHENTICATION\n  let authStatus = false;\n\n  if (localStorage.hasOwnProperty('authenticated')) {\n    authStatus = localStorage.getItem('authenticated') !== null;\n  }\n  const [auth, setAuth] = useState(authStatus);\n\n  function setActiveTab(tab: string) {\n    setTab(tab)\n  }\n\n  function authenticate() {\n    setAuth(true);\n    // Workaround because only string values can be saved to localStorage\n    localStorage.setItem('authenticated', 'true');\n  }\n\n  return (\n    <div className=\"App-container\">\n      {auth === false ? (\n        <Auth authenticate={authenticate} />\n      ) : (\n          <div className=\"col-12 p-0 flex\">\n            <header className=\"App-header col-12 px-3\">\n              <div className=\"App-title py-3 flex center-item\">\n                <Link to=\"/Home\" className=\"flex\">\n                  <img src={Icon} width={23} height={23} alt=\"\" />\n                  <div className=\"col-auto px-2\" >SeroTracker</div>\n                </Link>\n              </div>\n              <div className=\"App-tabs col-sm-4 col-lg-2\">\n                <Link className={getTabClass('/Home')} to=\"/Home\">Home</Link>\n                <Link className={getTabClass('/Data')} to=\"/Data\">Data</Link>\n                <Link className={getTabClass('/About')} to=\"/About\">About</Link>\n              </div>\n            </header>\n\n            <Switch>\n              <Route path=\"/About\">\n                <About />\n              </Route>\n              <Route path=\"/Data\">\n                <Data />\n              </Route>\n              <Route path=\"/Home\">\n                <Home />\n              </Route>\n              <Redirect exact from=\"/\" to=\"home\" />\n            </Switch>\n          </div>\n        )\n      }\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport App from './App';\nimport { AppContextProvider } from './context';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <AppContextProvider>\n        <App />\n      </AppContextProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}